# foundry/actions/meta_actions.py
"""
Contains meta-programming actions that create or modify Aura's own code.
"""
import logging
import json
from pathlib import Path
from typing import List, Dict, Any

from src.event_bus import EventBus
from src.events import ToolsModified

logger = logging.getLogger(__name__)


def create_new_tool(event_bus: EventBus, **kwargs) -> str:
    """
    Generates and writes a new blueprint file AND its corresponding action file.
    This function uses **kwargs to be robust against argument mismatches.
    """
    logger.info(f"Genesis Tool received the following arguments: {kwargs.keys()}")

    try:
        tool_name = kwargs['tool_name']
        description = kwargs['description']
        tool_parameters = kwargs['tool_parameters']
        action_code = kwargs['action_code']
    except KeyError as e:
        error_message = f"ERROR: Genesis Tool was called with a missing argument: {e}. It received: {list(kwargs.keys())}"
        logger.error(error_message)
        return error_message

    logger.info(f"Executing Final Genesis Tool: Creating full tool '{tool_name}'")

    properties = {}
    required = []
    for param in tool_parameters:
        param_dict = dict(param)
        param_name = param_dict['name']
        properties[param_name] = {
            "type": param_dict['type'],
            "description": param_dict['description']
        }
        required.append(param_name)

    parameters_schema = {
        "type": "object",
        "properties": properties,
        "required": required
    }
    # Using indent for readability in the generated file
    parameters_json = json.dumps(parameters_schema, indent=4)

    action_function_name = tool_name
    blueprint_code = f'''# blueprints/{tool_name}_bp.py
# This file was auto-generated by Aura's create_new_tool blueprint.
from foundry.blueprints import Blueprint

# Parameters schema for the LLM, generated by the Genesis Tool.
params = {parameters_json}

blueprint = Blueprint(
    id="{tool_name}",
    description="{description}",
    parameters=params,
    action_function_name="{action_function_name}"
)
'''
    blueprint_file_path = f"blueprints/{tool_name}_bp.py"

    try:
        Path(blueprint_file_path).write_text(blueprint_code, encoding='utf-8')
        logger.info(f"Successfully wrote blueprint file to {blueprint_file_path}")
    except Exception as e:
        error_message = f"ERROR: Failed to create blueprint file for '{tool_name}': {e}"
        logger.exception(error_message)
        return error_message

    action_file_path = f"foundry/actions/{tool_name}_action.py"
    try:
        Path(action_file_path).write_text(action_code, encoding='utf-8')
        logger.info(f"Successfully wrote action file to {action_file_path}")
    except Exception as e:
        error_message = f"ERROR: Failed to create action file for '{tool_name}': {e}"
        # If action file fails, remove the orphaned blueprint
        Path(blueprint_file_path).unlink(missing_ok=True)
        logger.exception(error_message)
        return error_message

    # Publish the event to notify the system that tools have changed.
    event_bus.emit("tools_modified", ToolsModified())

    success_message = (
        f"SUCCESS: New tool '{tool_name}' created successfully!\\n"
        f"Generated blueprint: {blueprint_file_path}\\n"
        f"Generated action: {action_file_path}\\n"
        f"The new tool is now available for use."
    )
    return success_message